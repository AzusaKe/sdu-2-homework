# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build with Qt6

on:
  push:
    branches: [ "graphic" ]
  pull_request:
    branches: [ "graphic" ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            qt_arch: win64_msvc2019_64
            aqt_target: windows desktop
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            qt_arch: gcc_64
            aqt_target: linux desktop
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            qt_arch: gcc_64
            aqt_target: linux desktop
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout code
    - uses: actions/checkout@v4

    - name: Setup CMake
      uses: actions/setup-cmake@v2
      with:
        cmake-version: '>=3.31.0'

    - name: Install Qt
      shell: bash
      run: |
        python -m pip install aqtinstall
        aqt install-qt ${{ matrix.aqt_target }} 6.7.3 --arch ${{ matrix.qt_arch }} --outputdir $RUNNER_TEMP/Qt

    - name: Setup Qt Environment
      shell: bash
      run: |
        QT_PATH="$RUNNER_TEMP/Qt/6.7.3/${{ matrix.qt_arch }}"
        echo "QT6_DIR=$QT_PATH/lib/cmake/Qt6" >> $GITHUB_ENV

        # Windows需要额外设置PATH
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "$QT_PATH/bin" >> $GITHUB_PATH
        fi

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
